package main

import (
	"context"
	"time"

	"github.com/maxsuelmarinho/ecommerce-example/golang-product-service/pkg/logger"
	"github.com/sirupsen/logrus"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/baggage"
	"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"
	"go.opentelemetry.io/otel/exporters/stdout/stdouttrace"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/metric/global"
	"go.opentelemetry.io/otel/propagation"
	controller "go.opentelemetry.io/otel/sdk/metric/controller/basic"
	processor "go.opentelemetry.io/otel/sdk/metric/processor/basic"
	"go.opentelemetry.io/otel/sdk/metric/selector/simple"
	"go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.4.0"
	"go.opentelemetry.io/otel/trace"
)

func main() {
	logger := logger.CreateLoggerInstance()
	shutdown := initTracer(logger)
	defer shutdown()
}

func initTracer(logger *logrus.Logger) func() {
	exporter, err := stdouttrace.New(
		stdouttrace.WithPrettyPrint(),
	)
	if err != nil {
		logger.Fatalf("failed to initialize stdout exporter pipeline: %v", err)
	}

	// tracing
	ctx := context.Background()

	// Resources are a special type of attribute that apply to all spans generated by a process
	resources, err := resource.New(ctx,
		resource.WithAttributes(
			semconv.ServiceNameKey.String("test-service"),
			semconv.ServiceVersionKey.String("1.0.0"),
			semconv.ServiceInstanceIDKey.String("abcdef12345"),
		),
	)
	if err != nil {
		logger.Fatalf("failed to create resource: %v", err)
	}

	bsp := sdktrace.NewBatchSpanProcessor(exporter)
	tp := sdktrace.NewTracerProvider(
		sdktrace.WithSpanProcessor(bsp),
		sdktrace.WithSampler(sdktrace.AlwaysSample()),
		sdktrace.WithResource(resources),
	)

	// metric
	metricExporter, err := stdoutmetric.New(
		stdoutmetric.WithPrettyPrint(),
	)
	if err != nil {
		logger.Fatalf("failed to initialize stdout metric exporter: %v", err)
	}
	pusher := controller.New(
		processor.NewFactory(simple.NewWithExactDistribution(), metricExporter),
		controller.WithExporter(metricExporter),
		controller.WithCollectPeriod(5*time.Second),
	)

	if err := pusher.Start(ctx); err != nil {
		logger.Fatalf("failed to initialize metric controller: %v", err)
	}

	//
	otel.SetTracerProvider(tp)
	global.SetMeterProvider(pusher)
	propagator := propagation.NewCompositeTextMapPropagator(propagation.Baggage{}, propagation.TraceContext{})
	otel.SetTextMapPropagator(propagator)

	//
	anotherKey := attribute.Key("ex.com/another")
	lemonsKey := attribute.Key("ex.com/lemons")
	commonLabels := []attribute.KeyValue{lemonsKey.Int(10), attribute.String("A", "1"), attribute.String("B", "2"), attribute.String("C", "3")}

	meter := global.Meter("ex.com/basic")

	// asynchronous value observer
	observerCallback := func(_ context.Context, result metric.Float64ObserverResult) {
		result.Observe(1, commonLabels...)
	}
	_ = metric.Must(meter).NewFloat64CounterObserver("ex.com.one", observerCallback, metric.WithDescription("A ValueObserver set to 1.0"))

	// synchronous value recorder
	valueRecorder := metric.Must(meter).NewFloat64Counter("ex.com.two")
	boundRecorder := valueRecorder.Bind(commonLabels...)

	tracer := otel.Tracer("ex.com/basic")
	foo, _ := baggage.NewMember("ex.com/foo", "foo1")
	bar, _ := baggage.NewMember("ex.com/bar", "bar1")
	bag, _ := baggage.New(foo, bar)
	ctx = baggage.ContextWithBaggage(ctx, bag)

	func(ctx context.Context) {
		var span trace.Span
		ctx, span = tracer.Start(ctx, "operation")
		defer span.End()

		span.AddEvent("Nice operation!", trace.WithAttributes(attribute.Int("bogons", 100)))
		span.SetAttributes(anotherKey.String("yes"))

		another, _ := baggage.NewMember("ex.com/another", "xyz")
		bag, _ := baggage.New(another)
		meter.RecordBatch(
			baggage.ContextWithBaggage(ctx, bag),
			commonLabels,
			valueRecorder.Measurement(2.0),
		)

		func(ctx context.Context) {
			var span trace.Span
			ctx, span = tracer.Start(ctx, "Sub operation...")
			defer span.End()

			span.SetAttributes(lemonsKey.String("five"))
			span.AddEvent("Sub span event")
			boundRecorder.Add(ctx, 1.3)
		}(ctx)
	}(ctx)

	return func() { // shutdown
		boundRecorder.Unbind()

		if err := tp.Shutdown(ctx); err != nil {
			logger.Fatal(err)
		}

		if err := pusher.Stop(ctx); err != nil {
			logger.Fatal(err)
		}

	}
}
